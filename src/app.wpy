

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import '@/baseApi.js'
export default class extends wepy.app {
  config = {
    pages: [
      'pages/tabs/home',
      'pages/tabs/cart',
      'pages/tabs/cates',
      'pages/tabs/me',
      'pages/tabs/search',
      'pages/goods_detail/main',
      'pages/goods_list',
      'pages/order'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#D81F07',
      navigationBarTitleText: '大煊商城',
      navigationBarTextStyle: 'white'
    },
    tabBar: {
      selectedColor: '#D81F07',
      list: [
        {
          pagePath: 'pages/tabs/home',
          text: '首页',
          iconPath: '/assets/icons/home.png',
          selectedIconPath: '/assets/icons/home-active.png'
        },
        {
          pagePath: 'pages/tabs/cates',
          text: 'cates',
          iconPath: '/assets/icons/cates.png',
          selectedIconPath: '/assets/icons/cates-active.png'
        },
        {
          pagePath: 'pages/tabs/cart',
          text: 'cart',
          iconPath: '/assets/icons/cart.png',
          selectedIconPath: '/assets/icons/cart-active.png'
        },
        {
          pagePath: 'pages/tabs/search',
          text: 'search',
          iconPath: '/assets/icons/search.png',
          selectedIconPath: '/assets/icons/search-active.png'
        },
        {
          pagePath: 'pages/tabs/me',
          text: 'me',
          iconPath: '/assets/icons/my.png',
          selectedIconPath: '/assets/icons/my-active.png'
        }
      ]
    },
    // 引用并注册全局组件
    usingComponents: {
      // 徽章组件
      'van-badge': './assets/vant/badge/index',
      'van-badge-group': './assets/vant/badge-group/index',
      // 布局相关组件
      'van-row': './assets/vant/row/index',
      'van-col': './assets/vant/col/index',
      // 搜索相关的组件
      'van-search': './assets/vant/search/index',
      // 单元格组件
      'van-cell': './assets/vant/cell/index',
      'van-cell-group': './assets/vant/cell-group/index',
      'van-icon': './assets/vant/icon/index',
      'van-tag': './assets/vant/tag/index',
      'van-card': './assets/vant/card/index',
      'van-tab': './assets/vant/tab/index',
      'van-tabs': './assets/vant/tabs/index',
      // 注册把HTML转换为小程序格式的组件
      wxparse: './assets/wxparse/wxparse',
      // 注册提交订单组件
      'van-goods-action': './assets/vant/goods-action/index',
      'van-goods-action-icon': './assets/vant/goods-action-icon/index',
      'van-goods-action-button': './assets/vant/goods-action-button/index',
      'van-stepper': './assets/vant/stepper/index',
       "van-checkbox": "./assets/vant/checkbox/index",
      //  滑动单元格组件
       "van-swipe-cell": "./assets/vant/swipe-cell/index",
      //  提交订单栏
      "van-submit-bar": "./assets/vant/submit-bar/index"
    }
  }
  // 专门存储全局共享的数据
  // 只需要通过this.$patrent.globalData 就可以拿到这个全局共享的数据

  globalData = {
    // 全局的购物车列表
    cart: [],
    total: 0
  }
  // 添加商品
  addGoodsToCart(goods) {
    const i = this.globalData.cart.findIndex(x => x.id === goods.goods_id)
    console.log(i)
    if (i !== -1) {
      this.globalData.cart[i].count++
      // console.log(this.globalData.cart)
      this.saveCartToStorage()
      return
    }
    // 梳理出来的商品信息对象
    const info = {
      id: goods.goods_id,
      name: goods.goods_name,
      price: goods.goods_price,
      pic: goods.goods_small_logo,
      count: 1,
      isCheck: true
    }
    this.globalData.cart.push(info)
    // console.log(this.globalData.cart)
    this.saveCartToStorage()
  }
  // 更新商品的数量
  updateGoodsCount(id, count) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      // 根据索引值，获取到对应的那个商品
      // 然后更新数量
      this.globalData.cart[i].count = count
      this.saveCartToStorage()
    }
  }
  // 更新商品的选中状态
  updateGoodsStatus(id, status) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if(i !== -1){
      this.globalData.cart[i].isCheck = status
      this.saveCartToStorage()
    }
  }
  // 完成购物车的删除功能，根据id删除对应的商品
  removeGoodsById(id) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if(i !== -1){
      console.log(i)
      this.globalData.cart.splice(i,i)
      this.saveCartToStorage()
    }
  }

  // 完成渲染购物车的徽章
  async renderCartBadge() {
    let num = 0;
    this.globalData.cart.forEach(item =>{
      if(item.isCheck){
        num += item.count
      }
    })
      const res = await wepy.setTabBarBadge({
      index: 2, //tabBar的哪一项，从左边算起,
      text: num + '',
    }).catch(err=>err)
    this.globalData.total = num
    // console.log(res)
  }
  // 更新购物车中每件商品的选中状态
  updateAllGoodsStatus(status){
    this.globalData.cart.forEach(item => item.isCheck = status)
    this.saveCartToStorage()
  }
  saveCartToStorage() {
    wepy.setStorageSync('cart', this.globalData.cart)
    this.renderCartBadge()
  }
  constructor() {
    super()
    this.use('requestfix')
    // 开启异步，通过这一行代码可以为异步的api，开启promise功能，这样，异步api调用的结果返回值是Promise对象
    this.use('promisify')

    // 拦截器
    this.intercept('request', {
      // 发出请求时的回调函数
      config(p) {
        wepy.showLoading({
          title: '数据加载中...'
        })
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p
      },

      // 请求成功后的回调函数
      success(p) {
        return p
      },
      // 请求失败后的回调函数
      fail(p) {
        return p
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete(p) {
        wepy.hideLoading()
        console.log('request complete: ', p)
      }
    })
  }

  onLaunch() {
    console.log('小程序启动了')
    this.globalData.cart = wepy.getStorageSync('cart') || []
    this.renderCartBadge()
  }
}
</script>
